- REACTのDOM操作
    - 従来のDOM操作
        - DOMを直接操作していた
            - レンダリングコストが高くなる
                - コードが複雑化して、どこで何が起きてるか分かりづらくなる
                    - 大規模サイトでjqueryを使用していたら起きやすい
    - 仮想DOM
        - いきなりDOMを変更するのではなく、
        JSで作られた仮想DOMに変更を加える。
        - レンダリングコストが低くなってスピード早くなった
- パッケージマネージャー
    - 流れ
        - 元々は単一のJSファイルに全ての処理を詰め込んでいた。
            - コードが複雑化してしまう
        - それからJSファイルを大きな処理のまとまりごとに分割して、コードの再利用等ができるようになった。
            - コードの再利用、共通化ができるようになった
            - ファイルの読み込み順を意識しないとエラーになる（依存関係）
            - 特定の処理がどこのファイルに書かれているのか分かりづらい
        - それからnpm/yarn等のパッケージマネージャーを使用するようになった
            - 内部ではNode.jsが動いている
            - 読み込み順による依存関係を勝手に解決してくれるようになった
            - importによって、何をどこから持ってきているのかわかるようになった。
                
                ```jsx
                import React from 'react';
                import { NextPage } from 'next';
                import { PageTitle } from '../components/atoms/text/PageTitle';
                ```
                
    - 特徴
        - 世界中で公開されているパッケージをコマンド1つで利用できる
        - チーム内での共有も簡単
    - 使用の流れ
        - NPM
            - オンライン上に様々なパッケージが公開されている場所があるので、そこからコマンドでインストールしてくる。
        - package.json
            - 何をどのバージョンでインストールしたかが記録される
        - lock系のファイル
            - インストールしたモジュールが裏で使ってる他のモジュールに関する情報や、バージョンが書かれている。
            - 自動的に生成されるため、ここを手作業で触ることは基本的にない
        - node_modules
            - モジュールの実態がインストールされていて、プログラムが動くときはここを見に行く。
            - 非常にサイズが大きいファイルなので、githubにあげたりはしない。
            - packege.jsonとlock系のファイルがあれば、どの環境でも同じnode_modulesが再現できる仕組み。（チームに2つのファイルを共有すれば同じ環境を使用でき）

![image.png](attachment:c3db47a8-3c2b-4d92-a667-3085f0685b2d:image.png)

- ESとは
    - ECMAScript
        - jsの標準規格（書き方のルール）
        - 毎年一回発表される
        - ES5=ES2014、ES6=ES2015
            - 最近は比較的後者の方が一般的だが、昔は前者が一般的であった。
        - ES2015で機能追加が多く、近代JSの転換期
    - ES2015
        - let、constを用いた変数宣言
        - アローファンクション
        - Class構文
        - 分割代入
        - テンプレート文字列
        - スプレッド構文
        - Promise
        - etc…
- モジュールバンドラーとは
    - 複数のファイルを1つにまとめたもの
        - jsやcss、imageファイル等
    - 経緯
        - jsは細かく分けた方が、再利用性や開発効率が上がるよね
        - 本番環境で実行するときは別れてる必要ないよね
            - 実行するとき別れたら読み込みに時間がかかり、大規模なサイトほどパフォーマンス落ちそう
        - じゃあ開発はファイルを分け、ビルドするときに1つにまとめましょう
        - ファイルの依存関係も自動判定していい感じにまとめられるようにしよう
    - 例
        - Webpack
            - 現在の主流
        - Vite
            - 仕組みはWebpackとは違う
            - Webpackより高速化をうたっており、今後の主流になる可能性がある。
- トランスパイラとは
    - 新しいjsの記法を古い記法に変換してくれる
    - 経緯
        - ES2015で便利な記法増えた！
        - 使ってみようとしたけどまだ対応してないブラウザあった、、
        - IEとかIEとかIEとかIEとか
        - ブラウザが対応するまで待つしかない、、？
        - 開発は新しい記法で実行するときは古い記法にしよう！
    - 例
        - BABEL
            - ずっと有名で使われてきた
        - SWC
            - BABELの覇権を奪おうとしている
            - lastという言語で使われている
            - バンドルなどいろいろできる
            - reactのフレームワークであるnext.jsでも内部的にデフォルトで使われている
            - 今後主流になってきそう
    - 昔のreactとかだとwebpackごりごりいじらなきゃだったけど、最近はフレームワークやライブラリがうまくしてくれるようになってきた
- SPAとは
    - モダンなjsはspaが基本
    - 1つのHTMLをjsで画面を書き換える
    - 従来のWebシステム
        - ユーザーのリクエスト
        - サーバーがhtmlを返却
        - ユーザーのpcに表示
        - 別ページリンクをふむ
        - サーバーがhtmlを返却
        - ユーザーのpcに表示
    - SPAを使ったWebシステム
        - ユーザーのリクエスト
        - サーバーがhtmlを返却（ほとんど空のページ）
        - 画面の内容をjsで書き換え
        - 別ページリンクをふむ
        - サーバーにそのページに必要なデータをリクエスト
        - htmlではなく、必要なデータを返す
        - jsでhtmlを書き換え、画面遷移したように見せる
    - メリット
        - 画面遷移の時に現れる白いページが表示されない
        - 表示速度アップによるユーザー体験の向上
        - コンポーネント分割による開発の効率化

- 実際に触ってみよう
https://codesandbox.io/p/sandbox/udemy-9wjggj?file=%2Fsrc%2Findex.mjs
    - index.mjs
        - このファイルがESmodulesで使われていのが明確にわかるように
        - importやexportを使うものを、ESmodules,ESMと呼ばれる
    - package.json
        - parcelというモジュールバンドラーが機能している
        - codesandboxが隠蔽してくれている
        - buildを挟んで実行している
    - const,let
        - var
            - 上書き可
            - 再宣言可
        - let
            - 上書き可
            - 再宣言不可
            - リアクトでは動的に値が変わるものはステートを使うので出る幕ないかも
        - const
            - 上書き不可
            - 再宣言不可
            - constで定義したオブジェクトや配列のプロパティは変更可能
    - アロー関数
        - 従来の関数
            
            ```jsx
            const func1 = function (str) {
            	return str;
            };
            console.log(func1("func1です"));
            ```
            
        - アロー関数
            
            ```jsx
            const func2 = (str) => {
            	return str;
            };
            console.log(func2("func2です"));
            
            const func3 = str => {
            	return str;
            };
            console.log(func3("func3です"));
            
            const func4 = str => str;
            console.log(func4("func4です"));
            
            const func5 = (num1, num2) => num1 + num2;    //括弧を外すとエラーになる
            console.log(func5(10, 20));
            
            const func6 = (num1, num2) => ({
            	hoge: num1,
            	hoge: num2,
            });
            console.log(func6(10, 20));    //オブジェクトが表示される
            ```
            
    - 分割代入
        - オブジェクト
            
            ```jsx
            const myProfile = {
            	name: "じゃけぇ",
            	age: 31
            };
            const message1 = `名前は${myProfile.name}です。年齢は${myProfile.age}歳です。`;
            
            const { name, age } = myProfile;
            const message2 = `名前は${name}です。年齢は${age}歳です。`;
            console.log(message2);
            ```
            
        - 配列
            
            ```jsx
            const myProfile = ["じゃけぇ", 31];
            const message3 = `名前は${myProfile[0]}です。年齢は${myProfile[1]}歳です。`
            console.log(message3);
            
            const [name, age] = myProfile;
            const message4 = `名前は${name}です。年齢は${age}歳です。`
            console.log(message4);
            ```
            
    - デフォルト値
        
        ```jsx
        const sayHello = () => console.log(`こんにちは！${name}さん！`);
        sayHello();　//こんにちは！undefinedさん！
        
        const sayHello = (name = "ゲスト") => console.log(`こんにちは！${name}さん！`);
        sayHello();　//こんにちは！ゲストさん！
        ```
        
        ```jsx
        const myProfile = {
        	age: 31
        };
        const { age, name } = myProfile;
        console.log(age);　//31
        console.log(name);　//undefined
        
        const myProfile = {
        	age: 31
        };
        const { age, name = "ゲスト" } = myProfile;
        console.log(age);　//31
        console.log(name);　//undefined
        ```
        
    - オブジェクトの省略記法
        
        ```jsx
        const name = "じゃけぇ";
        const age = 31;
        
        const myProfile = { name, age };
        console.log(myProfile)
        ```
        
    - スプレッド構文
        
        ```jsx
        const arr1 = [1, 2];
        console.log(arr1);　//(2)[1,2]
        console.log(...arr1);　//1 2
        
        const sumFunc = (num1, num2) => console.log(num1 + num2);
        sumFunc(arr1[0], arr1[1]);　//3
        sumFunc(...arr1);　//3
        
        const arr2 = [1, 2, 3, 4, 5];
        const [num1, num2, ...arr3] = arr2;
        console.log(num1);　//1
        console.log(num2);　//2
        console.log(arr3);　//(3) [3, 4, 5]
        
        const arr4 = [10, 20];
        const arr5 = [30, 40];
        
        const arr6 = [...arr4];
        console.log(arr6);　//(2) [10, 20]
        
        const arr7 = [...arr4, ...arr5];
        console.log(arr7);　//(4) [10, 20, 30, 40]
        
        const arr8 = arr4;
        console.log(arr8);　//(4) [10, 20, 30, 40]
        
        arr8[0] = 100;
        console.log(arr4);　//(2) [100, 20]
        
        arr6[0] = 100;
        console.log(arr6);　//(2) [100, 20]
        console.log(arr4);　//(2) [10, 20]
        ```
        
    - mapやfilter
        - ES2015で追加された、配列の処理の方法
        
        ```jsx
        const nameArr = ["田中", "山田", "じゃけぇ"];
        for (let index = 0; index < nameArr.length; index++) {
        	console.log(nameArr[index]);　//田中　山田　じゃけぇ
        }
        
        nameArr.map((name) => {
        	console.log(name);　//田中　山田　じゃけぇ
        });
        
        const nameArr2 = nameArr.map((name) => {
        	return name;
        });
        console.log(nameArr2);　//(3) ["田中", "山田", "じゃけぇ"];
        
        nameArr.map((name) => console.log(name));　//田中　山田　じゃけぇ
        
        nameArr.map((name, index) => console.log(`${index + 1}番目は${name}です`));
        
        const newNameArr = nameArr.map((name) => {
        	if(name === "じゃけぇ"){
        		return name;
        	} else {
        		return `${name}さん`;
        	}
        ```
        
        ```jsx
        const numArr = [1, 2, 3, 4, 5];
        const newNumArr = numArr.filter((num) => {
        	return num % 2 === 1;
        });
        console.log(newNumArr);　//(3) [1, 3, 5]
        ```
