## Webアクセシビリティとは

---

- 今では多くの人がスマートフォンを持ち、長時間のインターネット利用をしている。
アクセシビリティを高めれば、サービスにアクセスできるユーザーが大きく増加する。
→今後のサービス運営において大きなメリット
    - アクセスできない人を減らし、ユーザーを増やせる
        - アクセシビリティに取り組んでいない。
            - 知らぬ間に「アクセスできないユーザー」増加。
            - ユーザーが減る。
        - アクセシビリティに取り組んでいる。
            - コンテンツや機能を変更せずともユーザー減少を防げる。
            - ユーザー数の分母の最大化に貢献できる。
    - アクセスできると口コミが広がり、市場が生まれる
        - アクセシビリティ対応
        →あなたをユーザーとして認識し、関係性を築くつもりがある
        - 障害者はその障害ごとのコミュニティに属し日々情報交換を行なっている。
        - [事例](https://note.com/sendamasato/n/ncced792117e7)
            - 実際に口コミになっている
            - ユーザーからの直接FB
            - 積極的に、「アクセシビリティ取り組んでます！」というの大事
    - 権利を守り、法を遵守できる
        - 合理的配慮
            - 役所や会社の事業者に対して、障がいのある人から、社会の中にあるバリアを取り除くために何らかの対応を必要としていると伝えられた時に、負担が重すぎない範囲で対応すること
        - 環境の整備
            - 個々の障害者に合理的配慮が行えるように行う事前の改善措置のこと
        - 公的機関・民間事業者
            - 合理的配慮
                - しなければならない（法的義務）
                - 例：HPが読み上げられないとの問い合わせが来た。
                　　読み上げ可能なtxtファイルを提供する。
            - 環境の整備
                - するように努めなければならない（努力義務）
                - 例：HPが読み上げられるように修正しておく。
- [アクセシビリティオーバーレイ](https://qiita.com/mu_tomoya/items/8bd2696c1ce79db53b3c)
    - なにもの？
        - wcagに準拠したWebのアクセシビリティを提供するSaasのこと。
            - Saasとは
                - ソフトウェアを自分のコンピュータにインストールするのではなく、オンラインでアクセスして利用するもの
            - 例
                - https://qiita.com/mu_tomoya/items/8bd2696c1ce79db53b3c
        - JavaScriptを読み込むコードを置くだけでアクセシビリティに対応できる
    - 取り入れるべき？
        - デジ庁は非水準
        - wcagの基準に適合しているわけではない
- [障害者雇用率制度](https://www.mhlw.go.jp/stf/seisakunitsuite/bunya/koyou_roudou/koyou/shougaishakoyou/index.html)
    - 従業員が一定数以上の事業主は、身体障害者・精神障害者・知的障害者の割合を「法定雇用率」以上にする必要がある。
    - 民間企業の「法定雇用率」は2.3%。
    - 従業員が43.5人雇用している場合は障害者を1人以上雇用しなければならない。

## Webアクセシビリティの基礎

---

### 基礎となるマシンリーダブルを理解する

- 「名前」と「役割」
    - UIのアクセシビリティを担保する上で大事になる[セマンティクス](https://developer.mozilla.org/ja/docs/Glossary/Semantics)に「名前」と「役割」がある。
        - 名前
            - 対象を識別したり、目的を理解したりできる。
        - 役割
            - ユーザーが対象の振る舞い（ボタンであれば押せるなど）を予測できる。
    - スクリーンリーダー使用者
        - 「追加、ボタン」
        - いい例
        
        ```html
        <button class="button">
            <img src="image/icon/add.png" alt="追加" />
        </button>
        ```
        
        - 悪い例
        
        ```html
        <div class="button">
            <svg class="Icon -add" viewBox="0 0 512 512"><path d="M505..."></path></svg>
        </div>
        ```
        

- 状態
    - 何かを入力するUIには「状態」が必要
        - マシンにはそのUIが何をするものかがわかる必要がわからない
        →[セマンティクス](https://developer.mozilla.org/ja/docs/Glossary/Semantics)にする必要がある
        - checkedなどで、チェックされているのがどの項目か状態がわかるようになる
    - いい例
        
        ```html
        <label>
          <input type="checkbox" checked="checked" />
          同意する
        </label>
        ```
        
    - 悪い例
        
        ```html
        <span class="checkbox-wrapper" onclick="toggleCheck()">
            <span class="checkbox -checked"></span>
            <span>同意する</span>
        </span>
        ```
        
- wai-aria
    - htmlの要素や属性だけじゃ補えないせマンティクスを補完するのがWAI-ARIA
        - WAI-ARIAロール
            - 役割を補完する
        - WAI-ARIAステート/プロパティ
            - 状態やプロパティを補完する
    - 例
        
        ```html
        <div role="tablist">
            <button role="tab" aria-selected="true" id="search-tab">検索して追加</button>
            <button role="tab" aria-selected="false" tabindex="-1" id="file-tab">ファイルから追加</button>
        </div>
        <div role="tabpanel" aria-labelledby="search-tab" aria-hidden="false">
            省略
        </div>
        <div role="tabpanel" aria-labelledby="file-tab" aria-hidden="true">
            省略
        </div>
        ```
        
        - 役割
            - role="tablist"
            - role="tab"
            - role="tabpanel"
        - 状態
            - aria-selected
            - aria-hidden
        - 名前
            - aria-labelledby
        
        ```html
        <div role="button" class="Button">
            <svg role="img" aria-label="追加" class="Icon -add" viewBox="0 0 512 512">
                <path d="M505 ..." />
            </svg>
        </div>
        ```
        
        - 役割
            - role=”button”
            - role=”img”
        - 名前
            - aria-label
        
        ```html
        <span class="checkbox-wrapper" onclick="toggleCheck();">
            <span role="checkbox" aria-checked="true" aria-labelledby="label" class="checkbox -checked"></span>
            <span id="label">同意する</span>
        </span>
        ```
        
        - 役割
            - role="checkbox"
        - 状態
            - aria-checked
        - 名前
            - aria-labelledby
    - WAI-ARIAよりもHTMLネイティブセマンティクスが優れている理由
        - htmlはデフォルトのユーザースタイルシートを持っている
            - 最初からdivで作ってwai-ariaでセマンティクスを付与したくなるかも
            - ↑よくない
        - wai-ariaでセマンティクスを補完できても振る舞いまでは再現できない
            - 例
                - divにrole=”button”を付与してもキーボードフォーカスが当たらない
                - aタグであれば、コンテキストメニューの表示や左下に遷移先のURLが表示される
        - wai-ariaを理解できるUAや支援技術が限られている
- HTMLとWAI-ARIAとAOM(アクセシビリティオブジェクトモデル/ツリー)
    - 名前、役割、状態といったセマンティクスは、多くの支援技術やOSが用意しているアクセシビリティAPIを介してOS上のアプリケーションとやりとりしている。
        - アクセシビリティAPIの例
            - windows
                - Microsoft Active Accessibility
                - Aindows Automation API
            - mac
                - NSAccessibility
    - OS上のアプリケーションはアプリケーションのウィンドウをルートノードとしたAOMを生成する。
        - 個々のインタラクティブなインターフェースやテキストノードが含まれている。
        - このモデルをAPIを通じて公開し、支援技術が読み取り操作することでアプリケーションを操作する。
        - ブラウザは自身が持つ検索ボタンやインターフェースだけでなく、WebページもAOMに変換し、APIを通じて公開している。
        →ユーザーが支援技術を通じてWebページにアクセスできる。
    - WebコンテンツからAOMが生成される流れ
        - ブラウザが画面上に表示するインターフェースの表示のためDOMを生成。
        - CSSからCSSオブジェクトモデルを生成。
        - 二つのオブジェクトモデルを組み合わせる。
        - レンダリングツリーを生成してレイアウト計算を行う。
        - 画面に描画。
            - ここでAOMの生成処理も一緒にされる。
    - 詳細な例
        
        ```html
        <button>
            <img src="/image/icon/add.png" alt="">
            追加
        </button>
        <p>追加しました</p>
        
        <style>
            p {
                display: none; /* 図2-1-8の場合 */
                display: block; /* 図2-1-9の場合 */
            }
        </style>
        ```
        
    
    ![IMG_5372.jpeg](https://prod-files-secure.s3.us-west-2.amazonaws.com/be89dc3c-6442-47ed-869e-31119696b207/44a0cd91-8210-4db0-bc9f-ac6ca3ae6921/IMG_5372.jpeg)
    
- WAI-ARIAの種類
    - AOMのプロパティに対応した語彙がある。
        - 主な例
            - Nameプロパティ
                - オブジェクトの名前（アクセシブルな名前）
                    - テキストノードやlabel要素のテキスト
                - aria-labelやaria-labelledbyなどがある
            - Rollプロパティ
                - オブジェクトの役割（ロール）
                    - これにより支援技術はユーザーに操作を提示したりサポートできたりできる。
                        - buttonであればクリック可能であることを伝える。
                - role=””で指定できる。
            - Descriptionプロパティ
                - オブジェクトの説明
                    - Nameプロパティより詳細な説明を与える。
                        - htmlではtitle属性で与えることができる。
                - aria-describedby、aria-description(次の仕様で検討されている。)などがある。
            - Expandedプロパティ
                - オブジェクトが展開されているかどうかを表すプロパティ
                - aria-expanded
                    - aria-controlls等と共に、アコーディオン等で使われる
                    - https://temari.co.jp/blog/2021/03/01/accessibility-8/
            - 他にもたくさん種類がある
                - Checkedプロパティ、Disabledプロパティ、Busyプロパティなど
- 優先順位
    - WAI-ARIA > CSS > HTML
        - 例
            
            ```html
            <table style="display:contents" roll="table"></table>
            ```
            
            - rollプロパティ
                - HTMLから「table」となる
                - CSSで「display:contents」が指定されている
                    - 表構造でなくなる可能性がある
                    - ブラウザによってはrollプロパティをtableではない値に変更
                - WAI-ARIAのrollにtableが指定されている
                - 最終的にrollプロパティは「table」となる
- 組み合わせ
    - HTMLではchecked属性がinput要素のcheckboxタイプでしか有効にならないように、rollとaria属性の組み合わせもある程度決められている。
    - HTMLとWAI-ARIAの組み合わせにも許可されている組み合わせがある。
        - [ARIA in HTML](https://momdo.github.io/html-aria/)という仕様にまとまっている

### キーボード操作の基本

- 概要
    - tabキーや、enterキー、spaceキー等でキーボード操作ができる
    - GUIではマウスなどのポインティングバイスを主なツールとするが、
    キーボード操作で完結できると良い。
- よくある事例
    - 事例1 キーボード操作できない（インタラクティブ要素を用いていない）
        - 適切なHTMLの要素を使用していないケース
        - インタラクティブ要素は基本的にキーボード操作可能
            - [インタラクティブ要素一覧？](https://momdo.github.io/html/dom.html#interactive-content-2)
                - 例
                    - button要素
                    - select要素
                    - a要素（href属性がある場合）
        - 例
            - role=”button”をつけてもdiv要素はフォーカスを受け取れない
                - 補完されるのはセマンティクスのみで、フォーカスを受け取る振る舞いまでは補完されない
            
            ```html
            <script>
                const clickButton = (e) => { /* 処理 */ }
            </script>
            <div role="button" onclick="clickButton();">追加</div>
            ```
            
    - 事例2 キーボード操作できない（インタラクティブ要素を隠している）
        - 見た目を変更するためにinput要素をdisplay:none;で隠して、CSSや画像でチェックボックスを描画している場合、マウスではlabel要素をクリックすれば良いがフォーカスは当たらない
        
        ```html
        <label>
            <input type="checkbox" checked />
            <span class="Checkbox__wrapper">
                <svg viewBox="0 0 512 512" width="14">
                    <path fill="#0770c7" d="省略" />
                </svg>
            </span>
            同意する
        </label>
        
        <style>
            input {
                display: none;
            }
            input:not(:checked) ~ .Checkbox__wrapper > svg {
                display: none;
            }
        </style>
        ```
        
    - 事例3 キーボードで操作できない（マウスでしか表示されないUI）
        - マウス操作のみで表示できる領域内にUIがある場合も、その操作をキーボード操作できない。
            - hoverなど
    - 事例4 キーボード操作の現在位置がわからない
        - フォーカスインジケーターを非表示にしているとどこをフォーカスしているのかわからない
        - outline: none;をを使わないようにする