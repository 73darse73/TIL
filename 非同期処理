## 非同期処理がある意味

大きなプログラムがあった時に、
直列処理だとそのプログラムが終わらないと次のプログラムに進めない。

それを避けるために非同期処理がある。

## 同期処理との違い

### **同期処理**

ある処理を行うためには、ある処理の終了を待たなければならない。

### **非同期処理**

ある処理を行うために、ある処理の終了を待たなくて良い。

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/be89dc3c-6442-47ed-869e-31119696b207/9d32751b-3e8e-44ad-96dd-9cd041c20bca/Untitled.png)

## 非同期処理の流れ

ここで大事な要素が４つ

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/be89dc3c-6442-47ed-869e-31119696b207/0c82fac9-828b-4e11-87ea-4497ef464301/Untitled.png)

- コールスタック
    - 関数がここに入れられて実行される
- WebAPI
    - setTimeOut関数や、setInterval関数、DOMなど
    - JSがシングルスレッドでもWebAPIにタスクを投げることで非同期を実現できる。
- タスクキュー
    - 非同期関数の引数に渡されたコールバック関数が登録され、
    コールスタックが空になるまで待機する。
- イベントループ
    - コールスタックが空かどうか判断する

例↓

```jsx
console.log("start");  // A

setTimeout(function cb(){  // B

	console.log("FarStep");  // C
	
},2000);

console.log("end");  // D
```

1. コールスタックにAが入れられる。
2. Aが実行される。
3. Aがコールスタックから消える。
4. コールスタックにBが入れられる。
5. cbがWebAPIに渡される。
6. Bがコールスタックから消える。
7. コールスタックにDが入れられる。
8. Dが実行される。
9. Dがコールスタックから消える。
10. cbがタスクキューに入れられる。
11. イベントループがコールスタックに何もないことを確認する。
12. コールスタックにcbが入れられる。
13. コールスタックにCが入れられる。
14. Cが実行される。
15. Cがコールスタックから消える。
16. cbがコールスタックから消える。
