Webパフォーマンスにおける問題
* 遅延に関する問題  
* ブラウザがシングルスレッドであること

Webパフォーマンスにおいて「レイテンシ」は最大の敵である。  
「レイテンシ」とは待ち時間や遅延時間のこと。  

ネットサークレイテンシ：バイトを無線でコンピューターに送信するのにかかる時間  

ブラウザはメインスレッドが全ての作業を完了し、ユーザーインタラクションを常に処理できるようにする必要がある。　　
ブラウザのシングルスレッドの性質を理解し、メインスレッドの役割を最小限に抑えることで、　　
レンダリングがスムーズになりWebパフォーマンスを向上させることができる。　　

ナビゲーション  

Webページを読み込む最初のステップ。  
ユーザーのアドレスバーへのURL入力、リンククリック、フォーム送信などのアクションで　　
ページをリクエストするたびに発生する。  

DNSルックアップ  

Webページに移動するための最初の手順は、そのページがどこにあるかを見つけること。　　
ページのURLからネームサーバー（DNSサーバー）を使ってIPアドレスを取得する。  
キャッシュサーバーにリクエスト→ルートサーバー→下位の権威サーバーに、、→ユーザーにIPを返す  

初めてのリクエストの後、IPアドレスはキャッシュされる可能性があり、  
ネームサーバーに再度接続する代わりにキャッシュからIPアドレスを取得することで後続のリクエストが高速化される。  

ページを読み込む際に1度名前解決が行われる。
その後、そのソース内に違うドメインから参照されている  
画像やスクリプトがあれば、その数だけ名前解決を行う。  

これはスマホでサイトを見ている時に特に問題が起こりやすい。  
なぜなら、ユーザーがモバイル ネットワークを使用している場合、各DNSルックアップは、  
電話から携帯電話の基地局まで移動して、権威DNSサーバーに到達する必要があります。  
電話、携帯電話の基地局、およびネームサーバー間の距離によって、遅延が大幅に増加する可能性があります。

TCPハンドシェイクとは、通信を行う二つのコンピュータ（ここではブラウザとWebサーバー）が、  
データを送信する前にネットワーク上で接続を確立する仕組みです。以下のポイントを説明しています  

IPアドレスの確認: ブラウザがWebサーバーのIPアドレスを知ると、TCPハンドシェイクを開始します。  
TCP 3ウェイハンドシェイクの概要: TCPでは、通信を始める前に「SYN-SYN-ACK」という3つのメッセージが交換されます。  
これは、通信の相手が正しいか確認し、通信のパラメーター（設定や条件）を合意するためのプロセスです。
メッセージの交換: 具体的には、最初にブラウザがサーバーに「SYN」（同期）というメッセージを送信し、  
サーバーはそれに対して「SYN-ACK」（同期と確認）というメッセージで応答します。最後に、ブラウザが「ACK」（確認）メッセージを返すことで、接続が確立されます。  
接続確立後の状態: このハンドシェイクが完了すると、ブラウザとサーバーの間でデータの送受信が可能になります。  
これにより、実際のデータのやり取りが始まる前に、正しい通信パスが確保されます。
このプロセスは、TCP/IPネットワークにおいて重要な役割を果たし、安全かつ信頼性の高い通信を実現するために用いられます。

TLS  

TLSとは  
TLS (Transport Layer Security) は、インターネット上の通信を暗号化するためのプロトコル。  
これにより、データが送受信される際に第三者によって傍受・解読されるのを防ぐ。  

TLSネゴシエーションの目的  
HTTPS（HTTP over TLS）を使用して安全な接続を確立するには、  
最初にTLSネゴシエーションが行われる。　　
このネゴシエーションでは、次のことが行われる：
暗号スイートの選択：クライアントとサーバーが使用する暗号化方式を決定する。  
サーバーの認証：クライアントが接続しようとしているサーバーが本物であることを確認する。  
鍵交換：実際のデータの暗号化に使う鍵を交換します。  

手順の詳細  
TLSネゴシエーションは、いくつかのステップで構成されている：  
DNSルックアップ：サーバーのIPアドレスを取得する。  
TCPハンドシェイク：クライアントとサーバーが通信を開始するための準備をする。  
ClientHello：クライアントが使用する暗号スイートのリストやその他のパラメータをサーバーに送信する。  
ServerHello：サーバーがクライアントに選択された暗号スイートや証明書を返信する。  
証明書の検証：クライアントがサーバーの証明書を検証し、サーバーの正当性を確認する。  
鍵交換：暗号化に使用する共通の鍵を生成し、安全に交換する。  

遅延の原因  
HTTPS接続を確立するためには、これらのネゴシエーション手順を実行する必要がありる。  
そのため、通常のHTTP接続よりもページの読み込みに時間がかかることがありるが、データの安全性は保たれる。

リクエストの送信
TLSネゴシエーションが完了すると、　　
ブラウザはようやくリクエストをサーバーに送信できる状態になる。　　
この時点で暗号化された接続が確立されており、データの安全性が保たれたまま通信が行われる。

接続の確立とHTTP GETリクエスト:  
ユーザーがブラウザでWebページを開くと、
ブラウザはそのページのURLに基づいて対応するWebサーバーに接続を試みる。　　
接続が確立されると、ブラウザは最初のHTTP GETリクエストを送信する。  
このリクエストは、サーバーから特定のコンテンツを取得するためのもので、通常はHTMLファイルです。  

サーバーの応答:
サーバーはリクエストを受け取ると、そのリクエストに応じた応答を返す。
応答には、HTTPヘッダーとコンテンツが含まれ、  
HTTPヘッダーには、データのメタ情報（例えばコンテンツの種類やサイズ）が含まれています。  

TTFB (Time To First Byte):  
TTFBは、ユーザーがページを要求してから、ブラウザが最初のHTMLデータを受け取るまでの時間のこと。
通常、サーバーのレスポンス時間やネットワーク遅延に影響されます。  

リソースの取得:
ブラウザはHTMLを解析しながら、  
ページに表示するために必要な他のリソース（スタイルシート、スクリプト、画像など）が存在するかをチェックする。　　
これらのリソースは、ブラウザがページの解析中に見つけるたびに要求され、サーバーからダウンロードされる。
このように、Webページの表示は複数のリクエストと応答のサイクルに依存しており、  
最初のHTMLの取得がTTFBに影響を与える一方で、  
ページ全体の読み込み時間はその後のリソースの取得速度やブラウザのレンダリング能力によって決まる。  

輻輳制御 / TCP スロースタート  

TCPパケットは送信時にセグメントに分割される。  
これらのセグメントは、ネットワークを通じて相手に届けられ、  
順序を保ったまま受信される必要がある。 

サーバーはセグメントを送信し、クライアントからの確認応答（ACKパケット）を待機する。  
もしサーバーが多くのセグメントを一度に送信すると、  
ネットワークが混雑している場合にはクライアントがそれらのセグメントを正しく受信できないことがある。  
その結果、サーバーは再送を行う必要が生じ、ネットワークの負荷がさらに増大する。  

一方少ない数のセグメントを送信すると、  
ネットワークの帯域を十分に活用できない可能性がある。  
このような問題を解決するために、TCPでは「スロースタート」と呼ばれるアルゴリズムが用いられる。  

スロースタートでは、最初は少ない数のセグメントから始めて、  
ネットワークの応答を見ながら徐々に送信するセグメント数を増やしていく。  
具体的には、輻輳ウィンドウ（CWND）と呼ばれる値を管理し、  
ACKが受信されるたびにこの値を調整する。

ACKが受信されると、CWNDの値は倍増し、  
次回の送信時にはより多くのセグメントを送ることができる。  
一方、ACKが受信されない場合にはCWNDの値を減らし、  ネットワークの混雑を避ける。　　
これにより、送信するセグメントの数を適切に制御し、ネットワークの効率を向上させることができる。

このアルゴリズムによって、ネットワークの帯域幅を最大限に活用しつつ、　　
過剰なネットワークトラフィックや再送による負荷を軽減することが可能となる。


解析とは  

ブラウザが最初のデータチャンクを受信すると、そのデータを解析する。  
この解析とは、ブラウザが受信したHTMLやCSSをブラウザが理解しやすい形式に変換するプロセス。  
この変換されたデータは、DOM（Document Object Model）とCSSOM（CSS Object Model）として知られている。  

DOM（Document Object Model）:   
HTML文書の内部表現であり、ブラウザがページの構造や内容を理解しやすくするもの。  
DOMはJavaScriptからアクセスや操作が可能であり、ページの要素を動的に変更することができる。  

CSSOM（CSS Object Model）:   
CSSスタイルシートの内部表現であり、ブラウザがページのスタイルを理解しやすくするもの。　　
DOMと同様に、CSSOMもJavaScriptからアクセスや操作が可能。　　

レンダリングとレンダラー　　
解析されたDOMとCSSOMを使用して、ブラウザのレンダラーはページのレイアウトを計算し、それを画面に描画する。  
このプロセスを通じて、ユーザーが見ることができるウェブページが生成されます。  

パフォーマンス最適化と初期データチャンク  
Webパフォーマンスの最適化の観点から、  
ブラウザがページのレンダリングを開始するために必要な情報を初めのデータチャンク（通常は最初の数キロバイト）に含めることが重要。  
なぜなら、ブラウザは初めのデータを受け取った時点で解析を開始し、それに基づいて画面に何かを表示しようとするため。

まとめ
ブラウザがWebページを表示するためには、最初にHTMLとCSSを解析し、  
それを基にページのレイアウトを計算し、最終的に画面に描画する。　　
Webパフォーマンスを向上させるには、ブラウザが初めのデータ受信時に必要な情報を効率的に提供することが重要です。

DOMツリーの構築 クリティカルレンダリングパスの5つのステップ  

HTMLマークアップの処理:  
ブラウザはHTML文書を受け取り、最初のステップとしてHTMLマークアップを解析する。　　
このプロセスには、HTMLトークン化とツリー構築が含まれる。　　
HTMLトークンには、開始タグ、終了タグ、属性名とその値が含まれる。　　

DOMツリーの構築:　　
パーサーはHTMLをトークン化し、これらのトークンを基にDOMツリーを構築する。　　
DOMツリーは、HTML文書の階層構造を反映し、各要素が親子関係で結ばれている。　　
例えば、<html>要素がDOMツリーのルートノードとなる。　　

DOMツリーの表現:　　
DOMツリーは文書の内容を階層的に表現する。　　
各要素はノードと呼ばれ、他の要素の中にネストされたものは子ノードとして表現される。　　
DOMノードの数が多いほど、DOMツリーの構築には時間がかかる可能性がある。　　

非ブロッキングリソースの処理:　　
パーサーは画像などの非ブロッキングリソースを見つけると、　　
これらのリソースの取得を開始し、同時にHTMLの解析を進める。　　
これにより、ユーザーはページの一部を見ながら他のリソースの取得も並行して行われます。

スクリプトとレンダリングのブロック:　　
<script>要素は通常、ページのレンダリングをブロックする。　　
特にasyncやdefer属性がないスクリプトは、その場で解析と実行が行われるため、　　
HTMLの解析が一時停止する。これにより、ページの初期表示が遅れる可能性があります。

DOMツリーの効率的な構築と非ブロッキングリソースの管理は、  
ウェブページのパフォーマンスに直接影響を与える重要な要素である。
